version: 2

defaults: &defaults
  working_directory: ~/dd-opentracing-cpp
  docker:
    - image: datadog/docker-library:dd_opentracing_cpp_build_0_3_7
  resource_class: medium+

jobs:
  build:
    <<: *defaults
    environment:
      CMAKE_ARGS: -DBUILD_PLUGIN=ON -DBUILD_STATIC=ON -DBUILD_SHARED=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo
      CFLAGS: -march=x86-64 -fPIC
      CXXFLAGS: -march=x86-64 -fPIC
      LDFLAGS: -fPIC
    steps:
      - checkout
      - run:
          name: Run clang-format
          command: |
            find include src test examples -name '*.h' -o -name '*.cpp' | while read fname; do 
              changes=$(clang-format-9 --style=file --output-replacements-xml $fname | grep -c "<replacement " || true)
              if [ $changes != 0 ]
              then
                clang-format-9 -output-replacements-xml $fname
                echo "$fname did not pass clang-format, consider running: scripts/format.sh"
                exit 1
              fi
            done
      - run:
          name: Check version info is up-to-date
          command: ./test/version/version_check
      - run:
          name: Build source dependencies
          command: |
            ./scripts/install_dependencies.sh
      - run:
          name: Build (with cmake)
          command: |
            rm -rf .build
            mkdir -p .build
            mkdir -p /tmp/build/
            cd .build
            cmake $CMAKE_ARGS ..
            make --jobs=$(nproc)
            make install
            cp libdd_opentracing_plugin.so /tmp/build/libdd_opentracing_plugin.so
            cp libdd_opentracing.so /tmp/build/libdd_opentracing.so
      - run:
          name: Build (with bazel)
          command: |
            export CC=clang-9
            export CXX=clang++-9
            bazel build //:dd_opentracing_cpp
      - persist_to_workspace:
          root: /tmp/
          paths:
            - build
      - store_artifacts:
          path: /tmp/build

  test_sanitizer_base: &test_sanitizer_base
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build source dependencies
          command: |
            ./scripts/install_dependencies.sh
      - run:
          name: Build and test
          command: |
            rm -rf .build
            mkdir -p .build
            cd .build
            cmake $CMAKE_ARGS ..
            make --jobs=$(nproc)
            env $RUN_ARGS ctest --output-on-failure

  test_tsan:
    <<: *test_sanitizer_base
    environment:
      CMAKE_ARGS: -DBUILD_TESTING=ON -DSANITIZE_THREAD=On -DSANITIZE_UNDEFINED=On
      RUN_ARGS: TSAN_OPTIONS=detect_deadlocks=1:second_deadlock_stack=1

  test_asan:
    <<: *test_sanitizer_base
    environment:
      CMAKE_ARGS: -DBUILD_TESTING=ON -DSANITIZE_ADDRESS=On
      RUN ARGS:

  integration_test_nginx:
    working_directory: ~/dd-opentracing-cpp
    docker:
      - image: opentracing/nginx-opentracing:0.20.0
    environment:
      CMAKE_ARGS: -DBUILD_PLUGIN=ON -DBUILD_STATIC=OFF -DBUILD_SHARED=OFF -DCMAKE_BUILD_TYPE=RelWithDebInfo
      CFLAGS: -march=x86-64 -fPIC
      CXXFLAGS: -march=x86-64 -fPIC
      LDFLAGS: -fPIC
    steps:
      - run:
          name: Tools required to build code and dependencies
          command: |
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get -y install git cmake g++-7
      - checkout
      - run:
          name: Build source dependencies
          command: |
            ./scripts/install_dependencies.sh
      - run:
          name: Build (with cmake)
          command: |
            rm -rf .build
            mkdir -p .build
            mkdir -p /tmp/build/
            cd .build
            cmake $CMAKE_ARGS ..
            make --jobs=$(nproc)
            make install
            cp libdd_opentracing_plugin.so /usr/local/lib/libdd_opentracing_plugin.so
      - run:
          name: Tools required by integration test script
          command: |
            mkdir -p /usr/share/man/man1 # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=863199#23
            DEBIAN_FRONTEND=noninteractive apt-get -y install iproute2 jq openjdk-11-jre golang
            wget https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.18.0/wiremock-standalone-2.18.0.jar -O wiremock-standalone-2.18.0.jar
            printf '#!/bin/bash\nset -x\njava -jar '"$(pwd)/wiremock-standalone-2.18.0.jar \"\$@\"\n" > /usr/local/bin/wiremock
            chmod a+x /usr/local/bin/wiremock
            go get github.com/jakm/msgpack-cli
      - run:
          name: Integration test
          command: |
            # Change the config to use it.
            cd ./test/integration/nginx/
            cp nginx.conf /etc/nginx/nginx.conf
            cp dd-config.json /etc/dd-config.json
            mkdir -p /var/www/
            cp index.html /var/www/
            # Remove container symlinks
            rm /var/log/nginx/access.log /var/log/nginx/error.log
            # Run the tests.
            bash -x ./nginx_integration_test.sh

  test_coverage:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build source dependencies
          command: |
            ./scripts/install_dependencies.sh
      - run:
          name: Build (with cmake) and test with coverage
          command: |
            rm -rf .build
            scripts/run_coverage.sh
            rm -rf /tmp/coverage
            mkdir /tmp/coverage
            tar czf /tmp/coverage/report.tar.gz coverage/report
      - persist_to_workspace:
          root: /tmp/
          paths:
            - coverage
      - store_artifacts:
          path: /tmp/coverage
            
  stat:
      <<: *defaults
      steps:
        - run:
            name: Print information about the execution environment
            command: |
              set -x
              nproc
              uname -a
              cat /proc/meminfo

_workflow_filters:
  _version_tag: &version_tag
    # Allows semver or "test" tags, with any suffix.
    # eg v1.2.3 v0.1.1 v1.2.3-ayy-lmao test test-ayy-lmao
    # "test" is useful if you want to ensure all workflows run without creating a version.
    only: /(v[0-9]+\.[0-9]+\.[0-9]|test).*/

  _run_on_release_tag: &run_on_release_tag
    filters:
      tags:
        <<: *version_tag

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - stat:
          <<: *run_on_release_tag
      - build:
          <<: *run_on_release_tag
          requires:
            - stat
      - test_tsan:
          <<: *run_on_release_tag
          requires:
            - stat
      - test_asan:
          <<: *run_on_release_tag
          requires:
            - stat
      - integration_test_nginx:
          <<: *run_on_release_tag
          requires:
            - build
      - test_coverage:
          <<: *run_on_release_tag
          requires:
            - build
